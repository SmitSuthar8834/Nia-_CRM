# Generated by Django 4.2.7 on 2025-08-18 11:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIPromptTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('debriefing_question', 'Debriefing Question'), ('data_extraction', 'Data Extraction'), ('insight_generation', 'Insight Generation'), ('meeting_classification', 'Meeting Classification'), ('participant_matching', 'Participant Matching'), ('competitive_analysis', 'Competitive Analysis')], max_length=50)),
                ('context', models.CharField(choices=[('discovery', 'Discovery Call'), ('demo', 'Product Demo'), ('negotiation', 'Negotiation'), ('follow_up', 'Follow-up'), ('closing', 'Closing Meeting'), ('general', 'General')], default='general', max_length=50)),
                ('prompt_template', models.TextField(help_text='Template with placeholders like {meeting_type}, {participants}')),
                ('system_prompt', models.TextField(blank=True, help_text='System prompt for AI context', null=True)),
                ('temperature', models.FloatField(default=0.7, help_text='AI temperature setting (0-1)')),
                ('max_tokens', models.IntegerField(default=1000, help_text='Maximum tokens for response')),
                ('usage_count', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('success_rate', models.FloatField(default=0.0, help_text='Success rate (0-1)')),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_prompt_templates',
                'ordering': ['template_type', 'context', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AIInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interaction_type', models.CharField(choices=[('question_generation', 'Question Generation'), ('data_extraction', 'Data Extraction'), ('insight_generation', 'Insight Generation'), ('classification', 'Classification'), ('analysis', 'Analysis')], max_length=50)),
                ('input_data', models.JSONField(help_text='Input data sent to AI')),
                ('formatted_prompt', models.TextField(help_text='Final formatted prompt sent to AI')),
                ('ai_response', models.TextField(blank=True, null=True)),
                ('parsed_response', models.JSONField(blank=True, help_text='Structured response data', null=True)),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence score (0-1)', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('error', 'Error'), ('timeout', 'Timeout')], default='pending', max_length=20)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('token_count', models.IntegerField(blank=True, null=True)),
                ('cost_estimate', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('entity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('entity_id', models.UUIDField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('prompt_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.aiprompttemplate')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('accuracy', 'Accuracy'), ('relevance', 'Relevance'), ('completeness', 'Completeness'), ('usefulness', 'Usefulness')], max_length=20)),
                ('rating', models.IntegerField(choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Excellent')])),
                ('comments', models.TextField(blank=True, null=True)),
                ('suggested_response', models.TextField(blank=True, null=True)),
                ('improvement_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('interaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_engine.aiinteraction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_feedback',
            },
        ),
        migrations.CreateModel(
            name='AICache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prompt_hash', models.CharField(help_text='SHA-256 hash of the prompt', max_length=64, unique=True)),
                ('interaction_type', models.CharField(max_length=50)),
                ('cached_response', models.TextField()),
                ('cached_parsed_data', models.JSONField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('hit_count', models.IntegerField(default=0)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('original_prompt', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('template_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.aiprompttemplate')),
            ],
            options={
                'db_table': 'ai_cache',
            },
        ),
        migrations.AddIndex(
            model_name='aiprompttemplate',
            index=models.Index(fields=['template_type', 'context', 'is_active'], name='ai_prompt_t_templat_22b32f_idx'),
        ),
        migrations.AddIndex(
            model_name='aiprompttemplate',
            index=models.Index(fields=['usage_count'], name='ai_prompt_t_usage_c_a148d5_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinteraction',
            index=models.Index(fields=['interaction_type', 'status'], name='ai_interact_interac_ca09f8_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinteraction',
            index=models.Index(fields=['user', 'created_at'], name='ai_interact_user_id_b5ffbb_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinteraction',
            index=models.Index(fields=['entity_type', 'entity_id'], name='ai_interact_entity__c3c5c5_idx'),
        ),
        migrations.AddIndex(
            model_name='aiinteraction',
            index=models.Index(fields=['created_at'], name='ai_interact_created_52310f_idx'),
        ),
        migrations.AddIndex(
            model_name='aifeedback',
            index=models.Index(fields=['interaction'], name='ai_feedback_interac_1d7290_idx'),
        ),
        migrations.AddIndex(
            model_name='aifeedback',
            index=models.Index(fields=['feedback_type', 'rating'], name='ai_feedback_feedbac_d58ff4_idx'),
        ),
        migrations.AddIndex(
            model_name='aifeedback',
            index=models.Index(fields=['created_at'], name='ai_feedback_created_9b1c6d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aifeedback',
            unique_together={('interaction', 'user', 'feedback_type')},
        ),
        migrations.AddIndex(
            model_name='aicache',
            index=models.Index(fields=['prompt_hash'], name='ai_cache_prompt__3cfaa6_idx'),
        ),
        migrations.AddIndex(
            model_name='aicache',
            index=models.Index(fields=['interaction_type'], name='ai_cache_interac_127698_idx'),
        ),
        migrations.AddIndex(
            model_name='aicache',
            index=models.Index(fields=['expires_at'], name='ai_cache_expires_80a1dc_idx'),
        ),
        migrations.AddIndex(
            model_name='aicache',
            index=models.Index(fields=['last_accessed'], name='ai_cache_last_ac_d123ad_idx'),
        ),
    ]

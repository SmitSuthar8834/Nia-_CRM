# Generated by Django 4.2.7 on 2025-08-19 06:48

from django.db import migrations
from django.contrib.auth.models import User


def create_initial_templates(apps, schema_editor):
    """Create initial AI prompt templates"""
    AIPromptTemplate = apps.get_model('ai_engine', 'AIPromptTemplate')
    User = apps.get_model('auth', 'User')
    
    # Get or create a system user for templates
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            from django.utils import timezone
            admin_user = User.objects.create(
                username='system',
                email='system@example.com',
                is_staff=True,
                is_superuser=True,
                password='',  # Set empty password
                last_login=timezone.now()  # Set current time for last_login
            )
    except Exception:
        # If we can't create a user, skip template creation
        return
    
    # Discovery meeting question template
    AIPromptTemplate.objects.get_or_create(
        name='Discovery Meeting Questions',
        template_type='debriefing_question',
        context='discovery',
        defaults={
            'prompt_template': '''Based on the discovery meeting "{meeting_title}" with {participants}, generate {question_count} insightful debriefing questions that will help capture:

1. Customer needs and pain points
2. Budget and timeline information
3. Decision-making process and stakeholders
4. Technical requirements
5. Competitive landscape

Meeting context:
- Type: {meeting_type}
- Participants: {participants}
- Duration: {duration}
- Previous meetings: {previous_meetings}

Generate questions that are:
- Open-ended to encourage detailed responses
- Focused on actionable insights
- Relevant to the sales process
- Easy to understand and answer

Format each question as a numbered list.''',
            'system_prompt': 'You are an expert sales coach helping to debrief discovery meetings. Focus on extracting valuable insights that will help advance the sales opportunity.',
            'temperature': 0.7,
            'max_tokens': 800,
            'created_by': admin_user
        }
    )
    
    # Demo meeting question template
    AIPromptTemplate.objects.get_or_create(
        name='Demo Meeting Questions',
        template_type='debriefing_question',
        context='demo',
        defaults={
            'prompt_template': '''Based on the product demo "{meeting_title}" with {participants}, generate {question_count} targeted debriefing questions that will help capture:

1. Feature interest and feedback
2. Technical concerns or objections
3. Implementation requirements
4. User adoption considerations
5. Next steps and timeline

Meeting context:
- Type: {meeting_type}
- Participants: {participants}
- Duration: {duration}
- Previous meetings: {previous_meetings}

Generate questions that focus on:
- Which features resonated most
- Technical requirements and constraints
- Implementation timeline and process
- User feedback and concerns
- Competitive comparisons mentioned

Format each question as a numbered list.''',
            'system_prompt': 'You are an expert sales engineer helping to debrief product demonstrations. Focus on technical feedback and implementation considerations.',
            'temperature': 0.7,
            'max_tokens': 800,
            'created_by': admin_user
        }
    )
    
    # Follow-up question template
    AIPromptTemplate.objects.get_or_create(
        name='Follow-up Questions',
        template_type='debriefing_question',
        context='follow_up',
        defaults={
            'prompt_template': '''Based on the original question "{original_question}" and the user's response "{user_response}", generate an intelligent follow-up question that will:

1. Dig deeper into the topic if the response was brief
2. Clarify any ambiguous points
3. Explore related areas that weren't covered
4. Gather specific details that would be valuable for CRM updates

Meeting context:
- Type: {meeting_type}
- Participants: {participants}
- Meeting: {meeting_title}

The follow-up question should be:
- Natural and conversational
- Focused on gathering actionable information
- Relevant to the sales process
- Easy to answer

Generate only one follow-up question.''',
            'system_prompt': 'You are an expert sales coach helping to conduct thorough meeting debriefs. Ask follow-up questions that extract maximum value from each response.',
            'temperature': 0.8,
            'max_tokens': 200,
            'created_by': admin_user
        }
    )
    
    # Data extraction template
    AIPromptTemplate.objects.get_or_create(
        name='Meeting Data Extraction',
        template_type='data_extraction',
        context='general',
        defaults={
            'prompt_template': '''Extract structured information from the following meeting conversation:

"{conversation_text}"

Meeting context:
- Type: {meeting_type}
- Title: {meeting_title}
- Participants: {participants}

Please extract and organize the following information:

**Contacts:**
- New contacts mentioned (name, title, company, email, phone)
- Contact role changes or updates

**Action Items:**
- Tasks and commitments made
- Owner of each action item
- Deadlines and timelines
- Priority level

**Competitive Intelligence:**
- Competitors mentioned
- Competitive strengths/weaknesses discussed
- Pricing information
- Competitive threats or opportunities

**Deal Information:**
- Budget discussions
- Timeline updates
- Decision makers identified
- Technical requirements
- Buying process insights

**Meeting Outcome:**
- Overall meeting result
- Customer sentiment
- Next steps agreed upon
- Follow-up meetings scheduled

Format the response with clear sections and bullet points for each category.''',
            'system_prompt': 'You are an expert at extracting structured business information from sales conversations. Focus on accuracy and completeness while organizing information clearly.',
            'temperature': 0.3,
            'max_tokens': 1500,
            'created_by': admin_user
        }
    )


def reverse_create_templates(apps, schema_editor):
    """Remove initial templates"""
    AIPromptTemplate = apps.get_model('ai_engine', 'AIPromptTemplate')
    AIPromptTemplate.objects.filter(
        name__in=[
            'Discovery Meeting Questions',
            'Demo Meeting Questions', 
            'Follow-up Questions',
            'Meeting Data Extraction'
        ]
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('ai_engine', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_initial_templates, reverse_create_templates),
    ]

# Generated by Django 4.2.7 on 2025-08-18 11:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DebriefingInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('insight_type', models.CharField(choices=[('opportunity', 'Opportunity Identified'), ('risk', 'Risk Identified'), ('next_action', 'Recommended Next Action'), ('competitive_threat', 'Competitive Threat'), ('buying_signal', 'Buying Signal'), ('objection', 'Objection Identified'), ('requirement', 'Requirement Captured'), ('timeline_change', 'Timeline Change'), ('budget_info', 'Budget Information'), ('decision_maker', 'Decision Maker Identified')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('confidence_level', models.CharField(choices=[('low', 'Low Confidence'), ('medium', 'Medium Confidence'), ('high', 'High Confidence'), ('very_high', 'Very High Confidence')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Numerical confidence score (0-1)')),
                ('source_text', models.TextField(blank=True, help_text='Text that generated this insight', null=True)),
                ('suggested_actions', models.JSONField(default=list, help_text='AI-suggested actions based on this insight')),
                ('priority', models.CharField(default='medium', max_length=20)),
                ('user_validated', models.BooleanField(default=False)),
                ('user_feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'debriefing_insights',
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DebriefingQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('opening', 'Opening Question'), ('outcome', 'Meeting Outcome'), ('participants', 'Participants'), ('competitive', 'Competitive Intelligence'), ('technical', 'Technical Requirements'), ('timeline', 'Timeline & Next Steps'), ('budget', 'Budget Discussion'), ('decision_process', 'Decision Process'), ('objections', 'Objections & Concerns'), ('follow_up', 'Follow-up Actions'), ('closing', 'Closing Question')], max_length=50)),
                ('question_order', models.IntegerField()),
                ('is_follow_up', models.BooleanField(default=False)),
                ('ai_context', models.JSONField(default=dict, help_text='Context used to generate this question')),
                ('ai_prompt', models.TextField(blank=True, null=True)),
                ('user_response', models.TextField(blank=True, null=True)),
                ('response_timestamp', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('extracted_entities', models.JSONField(default=dict, help_text='Entities extracted from response')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'debriefing_questions',
                'ordering': ['question_order'],
            },
        ),
        migrations.CreateModel(
            name='DebriefingSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scheduled_time', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('expired', 'Expired')], default='scheduled', max_length=20)),
                ('conversation_data', models.JSONField(default=dict, help_text='Complete conversation history')),
                ('current_question_index', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField(default=0)),
                ('extracted_data', models.JSONField(default=dict, help_text='Structured data extracted from conversation')),
                ('confidence_scores', models.JSONField(default=dict, help_text='Confidence scores for extracted data')),
                ('ai_insights', models.JSONField(default=dict, help_text='AI-generated insights and recommendations')),
                ('user_approved', models.BooleanField(default=False)),
                ('approval_timestamp', models.DateTimeField(blank=True, null=True)),
                ('user_feedback', models.JSONField(default=dict, help_text='User feedback on AI suggestions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'debriefing_sessions',
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='DebriefingTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('discovery', 'Discovery Call'), ('demo', 'Product Demo'), ('negotiation', 'Negotiation'), ('follow_up', 'Follow-up'), ('closing', 'Closing Meeting'), ('general', 'General Meeting')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('question_templates', models.JSONField(default=list, help_text='List of question templates')),
                ('ai_prompts', models.JSONField(default=dict, help_text='AI prompts for different question types')),
                ('extraction_rules', models.JSONField(default=dict, help_text='Rules for data extraction')),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'debriefing_templates',
                'ordering': ['template_type', 'name'],
            },
        ),
    ]

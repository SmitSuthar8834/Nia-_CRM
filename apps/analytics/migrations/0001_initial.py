# Generated by Django 4.2.7 on 2025-08-18 11:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealthMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('health_type', models.CharField(choices=[('api_response_time', 'API Response Time'), ('database_performance', 'Database Performance'), ('ai_service_availability', 'AI Service Availability'), ('calendar_sync_success', 'Calendar Sync Success'), ('crm_sync_success', 'CRM Sync Success'), ('error_rate', 'Error Rate'), ('memory_usage', 'Memory Usage'), ('cpu_usage', 'CPU Usage')], max_length=50)),
                ('component', models.CharField(help_text='System component being measured', max_length=100)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('down', 'Down')], default='healthy', max_length=20)),
                ('warning_threshold', models.FloatField(blank=True, null=True)),
                ('critical_threshold', models.FloatField(blank=True, null=True)),
                ('details', models.JSONField(default=dict)),
                ('measured_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_health_metrics',
                'ordering': ['-measured_at'],
                'indexes': [models.Index(fields=['health_type', 'component'], name='system_heal_health__a5dcd6_idx'), models.Index(fields=['status', 'measured_at'], name='system_heal_status_455a6a_idx'), models.Index(fields=['measured_at'], name='system_heal_measure_b72212_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserEngagementMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('engagement_type', models.CharField(choices=[('login', 'Login'), ('meeting_view', 'Meeting Viewed'), ('debriefing_start', 'Debriefing Started'), ('debriefing_complete', 'Debriefing Completed'), ('lead_update', 'Lead Updated'), ('calendar_sync', 'Calendar Synced'), ('ai_interaction', 'AI Interaction')], max_length=50)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('entity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('entity_id', models.UUIDField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_engagement_metrics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'engagement_type', 'created_at'], name='user_engage_user_id_2113e3_idx'), models.Index(fields=['session_id'], name='user_engage_session_c707a9_idx'), models.Index(fields=['created_at'], name='user_engage_created_6368eb_idx')],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('daily_summary', 'Daily Summary'), ('weekly_performance', 'Weekly Performance'), ('monthly_analytics', 'Monthly Analytics'), ('user_activity', 'User Activity Report'), ('data_quality', 'Data Quality Report'), ('system_health', 'System Health Report'), ('competitive_intelligence', 'Competitive Intelligence'), ('pipeline_analysis', 'Pipeline Analysis')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('report_data', models.JSONField(default=dict, help_text='Generated report data')),
                ('summary', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='generating', max_length=20)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('generation_time_seconds', models.IntegerField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reports',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['report_type', 'period_start'], name='reports_report__e4318a_idx'), models.Index(fields=['created_by', 'created_at'], name='reports_created_83c295_idx'), models.Index(fields=['status'], name='reports_status_e83c1d_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(choices=[('debriefing_completion', 'Debriefing Completion Rate'), ('data_extraction_accuracy', 'Data Extraction Accuracy'), ('meeting_detection_accuracy', 'Meeting Detection Accuracy'), ('participant_matching_accuracy', 'Participant Matching Accuracy'), ('crm_sync_success', 'CRM Sync Success Rate'), ('ai_response_time', 'AI Response Time'), ('user_engagement', 'User Engagement'), ('lead_conversion', 'Lead Conversion Rate')], max_length=50)),
                ('metric_name', models.CharField(max_length=200)),
                ('aggregation_period', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('value', models.FloatField()),
                ('count', models.IntegerField(default=0)),
                ('target_value', models.FloatField(blank=True, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metric data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_metrics',
                'ordering': ['-period_start'],
                'indexes': [models.Index(fields=['metric_type', 'period_start'], name='performance_metric__01841c_idx'), models.Index(fields=['user', 'metric_type'], name='performance_user_id_38b3e6_idx'), models.Index(fields=['period_start', 'period_end'], name='performance_period__57a544_idx')],
                'unique_together': {('metric_type', 'aggregation_period', 'period_start', 'user')},
            },
        ),
        migrations.CreateModel(
            name='DataQualityMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quality_type', models.CharField(choices=[('extraction_confidence', 'Extraction Confidence'), ('field_completeness', 'Field Completeness'), ('data_accuracy', 'Data Accuracy'), ('user_corrections', 'User Corrections'), ('validation_errors', 'Validation Errors')], max_length=50)),
                ('entity_type', models.CharField(max_length=50)),
                ('field_name', models.CharField(blank=True, max_length=100, null=True)),
                ('score', models.FloatField(help_text='Quality score (0-1)')),
                ('confidence', models.FloatField(blank=True, help_text='Confidence in the score', null=True)),
                ('entity_id', models.UUIDField()),
                ('measurement_date', models.DateField(default=django.utils.timezone.now)),
                ('details', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_quality_metrics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['quality_type', 'entity_type'], name='data_qualit_quality_e345ff_idx'), models.Index(fields=['entity_id'], name='data_qualit_entity__f11c45_idx'), models.Index(fields=['measurement_date'], name='data_qualit_measure_265bbf_idx'), models.Index(fields=['score'], name='data_qualit_score_f95260_idx')],
            },
        ),
    ]
